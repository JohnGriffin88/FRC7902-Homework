/*
* Jonathan Guo
* Firebirds U1 L2
* 25/07/26
*/

import java.util.Scanner;

public class PersonExercise {

    public static void main(String[] args) {
        // Creating Person objects
        Person p1 = new Person("Jonathan", 30, 60000, 2000);
        Person p2 = new Person("Jeffrey", 25, 50000, 1500);
        Person p3 = new Person("Jason", 40, 100000, 4000);
        Person p4 = new Person("Jake", 35, 85000, 2500);
        Person p5 = new Person("Jaden", 28, 75000, 3000);

        // Creating specialized objects
        Teacher t1 = new Teacher("Mrs. B", 45, 8);
        Student s1 = new Student("Brandon", 16, 75.5f);
        Parent pr1 = new Parent("Mr. A", 40, 70);

        // Calling some methods
        p1.greeting();
        p2.celebrateBirthday();
        p3.work();
        System.out.println("Jonathan's net worth: $" + p1.calculateNetWorth());
        System.out.println();

        // Random relationships for Person objects
        determineRelationship(p1, p2);
        determineRelationship(p3, p4);
        determineRelationship(p4, p5);

        System.out.println();

        // Use PTconference to print report based on teacher, parent, student
        PTconference(t1, pr1, s1);
    }

    // Static method to output a random relationship between two Person objects
    public static void determineRelationship(Person p1, Person p2) {
        String[] relations = {"friends", "colleagues", "enemies", "siblings", "partners"};
        int index = (int) (Math.random() * relations.length);
        System.out.println(p1.name + " and " + p2.name + " are " + relations[index]);
    }

    // PTconference method
    public static void PTconference(Teacher teacher, Parent parent, Student student) {
        int combinedScore = teacher.amiability + (int) student.grade;
        System.out.println("Parent-Teacher Conference Report:");
        System.out.println(teacher.name + " reports on " + student.name + "'s performance.");
        if (combinedScore < 50) {
            System.out.println(student.name + " is struggling.");
            if (parent.trust < 50) {
                System.out.println(parent.name + " is upset with the teacher.");
            } else {
                System.out.println(parent.name + " is concerned but calm.");
            }
        } else if (combinedScore < 75) {
            System.out.println(student.name + " is doing okay.");
            System.out.println(parent.name + " is supportive.");
        } else {
            System.out.println(student.name + " is excelling!");
            System.out.println(parent.name + " is proud and happy.");
        }
    }
}

// Base Person class
class Person {
    String name;
    int age;
    double netIncome;
    double annualSalary;
    double monthlySpending;

    public Person(String name, int age, double annualSalary, double monthlySpending) {
        this.name = name;
        this.age = age;
        this.annualSalary = annualSalary;
        this.monthlySpending = monthlySpending;
        this.netIncome = 0.0;
    }

    public void greeting() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }

    public void celebrateBirthday() {
        age++;
        System.out.println(name + " is now " + age + " years old. Happy Birthday!");
    }

    public void work() {
        netIncome += 1000;
        System.out.println(name + " worked and earned $1000. Total net income: $" + netIncome);
    }

    public double calculateNetWorth() {
        double yearlySpending = monthlySpending * 12;
        return annualSalary - yearlySpending + netIncome;
    }
}

// Teacher inherits from Person
class Teacher extends Person {
    int amiability; // scale 0-10

    public Teacher(String name, int age, int amiability) {
        super(name, age, 0, 0); // Teachers don't use salary/spending here
        this.amiability = amiability;
    }

    public void teach() {
        System.out.println(name + " is teaching the class.");
    }
}

// Student inherits from Person
class Student extends Person {
    float grade; // 0-100

    public Student(String name, int age, float grade) {
        super(name, age, 0, 0); // Student's salary/spending irrelevant here
        this.grade = grade;
    }

    public void study() {
        System.out.println(name + " is studying hard.");
    }
}

// Parent inherits from Person
class Parent extends Person {
    int trust; // 0-100 scale for trust towards child

    public Parent(String name, int age, int trust) {
        super(name, age, 0, 0); // Salary/spending irrelevant
        this.trust = trust;
    }

    public void supportChild() {
        System.out.println(name + " is supporting their child.");
    }
}
